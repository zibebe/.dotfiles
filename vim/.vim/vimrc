" load sensible defaults first
runtime! plugin/sensible.vim
" load fzf 
set rtp+=/opt/homebrew/opt/fzf
" load the opt lsp plugin
packadd lsp

let mapleader = " "
" to generate all helptags use this
" packloadall | silent! helptags ALL

" show relative line numbers
set relativenumber
" but show the absolute line number for the current line
set number
" case-insensitive search/replace
set ignorecase
" unsless uppercase in search term
set smartcase
" show a column at 80 chars as a guide for long lines
set colorcolumn=80
" show more hidden characters
" also, show tabs nicer
set listchars=tab:^\ ,nbsp:¬,extends:»,precedes:«,trail:•

set termguicolors
colorscheme nord 

" goto mode
nnoremap gn :bnext<CR>
nnoremap gp :bprev<CR>
nnoremap gD :LspGotoDeclaration<CR>
nnoremap gd :LspGotoDefinition<CR>
nnoremap gy :LspGotoTypeDef<CR>
nnoremap gr :LspPeekReferences<CR>
nnoremap gi :LspGotoImpl<CR>

" space mode
nnoremap <leader>f :Files<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>g :GFiles?<CR>
nnoremap <leader>G :Git<CR>
nnoremap <leader>k :LspHover<CR>
nnoremap <leader>d :LspDiag show<CR>
nnoremap <leader>r :LspRename<CR>
nnoremap <leader>s :Rg<CR>
nnoremap <leader>a :LspCodeAction<CR>
nmap <leader>c :Commentary<CR>
xmap <leader>c :Commentary<CR>

" unimpaired alike
nnoremap [d :LspDiag nextWrap<CR>
nnoremap ]d :LspDiag prevWrap<CR>

" Clangd language server
call LspAddServer([#{
	\    name: 'clangd',
	\    filetype: ['c', 'cpp'],
	\    path: '/opt/homebrew/opt/llvm/bin/clangd',
	\    args: ['--background-index']
	\  }])

" Go language server
call LspAddServer([#{
	\    name: 'golang',
	\    filetype: ['go', 'gomod'],
	\    path: '/opt/homebrew/bin/gopls',
	\    args: ['serve'],
	\    syncInit: v:true
	\  }])

" Rust language server
call LspAddServer([#{
	\    name: 'rustlang',
	\    filetype: ['rust'],
	\    path: '/Users/zibebe/.cargo/bin/rust-analyzer',
	\    args: [],
	\    syncInit: v:true
	\  }]) 
